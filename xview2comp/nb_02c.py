
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/02c_bmask_to_polygons.ipynb

from xview2comp.nb_02b import *
import imantics
from simplification.cutil import simplify_coords_vwp
from uuid import uuid4
import tqdm

def bmask2polys(mask):
    '''
    Convert mask to polys.
    mask: 2d numpy.ndarray
    ps: np.array of np.arrays, containing all polygons',
        their vertices' (x, y) coordinates.
    '''
    sz = mask.shape[0]
    ps = imantics.Mask(mask).polygons()
    ps = (p.reshape(-1, 2) for p in ps)
    ps = (simplify_coords_vwp(p, .3).astype(np.int32) for p in ps)
    return sz, np.array([np.concatenate((p, p[0][None,...])) for p in ps])

def polys2bmask(polys, sz):
    '''
    Convert polygons to binary mask.
    polys: np.array of np.arrays, containing all polygons',
        their vertices' (x, y) coordinates.
    mask: 2d numpy.ndarray
    '''
    mask = np.zeros((sz, sz), dtype=np.uint8)
    cv2.fillPoly(mask, polys, (1,));
    return mask

def crop_by_polygon(img:Image, polygon:np.ndarray, scale_pct=.8):
    '''
    Crop image by polygon
    img: image in which polygon lies.
    polygon: numpy array of (x, y) coordinates of vertices of polygon.
    '''
    width, height = img.size
    xs, ys = zip(*polygon)
    xmin, xmax, ymin, ymax = min(xs), max(xs), min(ys), max(ys)
    dx, dy = xmax - xmin, ymax - ymin
    ddx, ddy = scale_pct * dx, scale_pct * dy
    xmin, xmax = int(np.floor(xmin - ddx)), int(np.ceil(xmax + ddx))
    ymin, ymax = int(np.floor(ymin - ddy)), int(np.ceil(ymax + ddy))
    xmin, xmax = max(xmin, 0), min(xmax, width)
    ymin, ymax = max(ymin, 0), min(ymax, height)
    return Image(img.data[:,ymin:ymax,xmin:xmax])

def wkt2array(wkt:str):
    '''
    Convert well-known text representation string
    to array of (x,y) coords
    '''
    poly = shapely.wkt.loads(wkt)
    poly = shapely.geometry.mapping(poly)
    poly = np.array(poly['coordinates'][0], dtype=np.int32)
    return poly

def generate_classification_train(nposimgs, nposlabs, path=None, csv=None):
    assert len(nposimgs) == len(nposlabs)
    df = pd.DataFrame()
    for nposimg, nposlab in progress_bar(list(zip(nposimgs, nposlabs))):
        posimg = open_image(nposimg)
        feats = load_features(nposlab)
        df_polys = features2df(feats)
        for _, r in df_polys.iterrows():
            p = wkt2array(r.wkt)
            img = crop_by_polygon(posimg, p)
            img.save(path/f'{r.uid}.png')
            srs = pd.Series({'uid':r.uid, 'damage':r.subtype})
            df = df.append(srs, ignore_index=True)
    df.to_csv(path/csv, index=False)